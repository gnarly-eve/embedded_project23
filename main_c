#include <msp430.h> 


//temp variable

float temp;

//light variable

float light;

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	
	//put into software reset
	UCB0CTLW0 |= UCSWRST;
    UCB1CTLW0 |= UCSWRST;

    //configure eUSCI
    //UCB0
    UCB0CTLW0 |= UCSSEL_3;
    UCB0BRW = 10;

    UCB0CTLW0 |= UCMODE_3;
    UCB0CTLW0 |= UCMST;
    UCB0CTLW0 &= ~UCTR;
    UCB0I2CSA = 0x044;

    UCB0CTLW1 |= UCASTP_2;
    UCB0TBCNT = 0x01;

    //UCB1
    UCB1CTLW0 |= UCSSEL_3;
    UCB1BRW = 10;

    UCB1CTLW0 |= UCMODE_3;
    UCB1CTLW0 |= UCMST;
    UCB1CTLW0 &= ~UCTR;
    UCB1I2CSA = 0x029;

    UCB1CTLW1 |= UCASTP_2;
    UCB1TBCNT = 0x01;

    //configure ports
    P1SEL1 &= ~BIT3;
    P1SEL0 |= BIT3;
    P1SEL1 &= ~BIT2;
    P1SEL0 |= BIT2;

    P4SEL1 &= ~BIT7;
    P4SEL0 |= BIT7;
    P4SEL1 &= ~BIT6;
    P4SEL0 |= BIT6;

    PM5CTL0 &= ~LOCKLPM5;

    //take eUSCI_B out of software reset
    UCB0CTLW0 &= ~UCSWRST;
    UCB1CTLW0 &= ~UCSWRST;

    //enable interrupts
    UCB0IE |= UCRXIE0;
    UCB1IE |= UCRXIE0;
    __enable_interrupt();

    int i;

    while(1){
        UCB0CTLW0 |= UCTXSTT;
        UCB1CTLW0 |= UCTXSTT;
        for(i=0 ; i<100; i = i + 1){}

    }
}

//interrupt routines
#pragma vector=EUSCI_B0_VECTOR
__interrupt void EUSCI_B0_I2C_ISR(void){
    temp = UCB0RXBUF;
}

#pragma vector=EUSCI_B1_VECTOR
__interrupt void EUSCI_B1_I2C_ISR(void){
    light = UCB0RXBUF;
}
